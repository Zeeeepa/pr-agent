name: UI and Events Integration

on:
  push:
    branches: [ main ]
    paths:
      - 'pr_agent/execserver/ui/**'
      - 'pr_agent/execserver/services/**'
      - 'pr_agent/execserver/api/**'
      - '.github/workflows/ui-events-integration.yaml'
  pull_request:
    branches: [ main ]
    paths:
      - 'pr_agent/execserver/ui/**'
      - 'pr_agent/execserver/services/**'
      - 'pr_agent/execserver/api/**'
      - '.github/workflows/ui-events-integration.yaml'
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build and Test Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'pr_agent/execserver/ui/package-lock.json'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-asyncio httpx

      - name: Install UI dependencies
        run: |
          cd pr_agent/execserver/ui
          npm ci

      - name: Build UI
        run: |
          cd pr_agent/execserver/ui
          npm run build

      - name: Copy UI build to static directory
        run: |
          mkdir -p pr_agent/execserver/ui/static
          cp -r pr_agent/execserver/ui/dist/* pr_agent/execserver/ui/static/

      - name: Start server
        run: |
          # Start the server in the background
          python -m pr_agent.execserver.app &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV

          # Wait for server to start
          sleep 5

      - name: Test UI endpoints
        run: |
          # Test that the UI is serving correctly
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/)
          if [ $HTTP_STATUS -ne 200 ]; then
            echo "UI endpoint returned HTTP status $HTTP_STATUS, expected 200"
            exit 1
          fi
          echo "UI endpoint is working correctly"

          # Test API endpoints
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/api/v1/events)
          if [ $HTTP_STATUS -ne 200 ]; then
            echo "Events API endpoint returned HTTP status $HTTP_STATUS, expected 200"
            exit 1
          fi
          echo "Events API endpoint is working correctly"

      - name: Test event webhook integration
        run: |
          # Create a test event payload
          cat > test_event.json << EOF
          {
            "action": "opened",
            "number": 1,
            "pull_request": {
              "title": "Test PR",
              "body": "This is a test PR",
              "html_url": "https://github.com/${{ github.repository }}/pull/1"
            },
            "repository": {
              "full_name": "${{ github.repository }}"
            }
          }
          EOF

          # Send the event to the webhook endpoint
          curl -X POST -H "Content-Type: application/json" -H "X-GitHub-Event: pull_request" -d @test_event.json http://localhost:8000/api/v1/github_webhooks

          # Check that the event was processed
          sleep 2
          EVENTS_JSON=$(curl -s http://localhost:8000/api/v1/events)
          echo "Events response: $EVENTS_JSON"

          # Simple check to see if the response contains our test event
          if [[ $EVENTS_JSON == *"Test PR"* ]]; then
            echo "Event was successfully processed"
          else
            echo "Event processing failed"
            exit 1
          fi

      - name: Stop server
        if: always()
        run: |
          if [ -n "${{ env.SERVER_PID }}" ]; then
            kill ${{ env.SERVER_PID }} || true
          fi

  e2e-test:
    name: End-to-End Test
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile
          push: false
          load: true
          tags: codiumai/pr-agent:ui-test
          target: ui

      - name: Run Docker container
        run: |
          docker run -d -p 8000:8000 --name pr-agent-ui codiumai/pr-agent:ui-test

          # Wait for container to start
          sleep 5

          # Check if container is running
          if [ "$(docker inspect -f {{.State.Running}} pr-agent-ui)" != "true" ]; then
            echo "Container failed to start"
            docker logs pr-agent-ui
            exit 1
          fi

      - name: Test UI in Docker
        run: |
          # Test that the UI is serving correctly
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/)
          if [ $HTTP_STATUS -ne 200 ]; then
            echo "UI endpoint returned HTTP status $HTTP_STATUS, expected 200"
            exit 1
          fi
          echo "UI endpoint is working correctly"

          # Test API endpoints
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/api/v1/events)
          if [ $HTTP_STATUS -ne 200 ]; then
            echo "Events API endpoint returned HTTP status $HTTP_STATUS, expected 200"
            exit 1
          fi
          echo "Events API endpoint is working correctly"

      - name: Stop Docker container
        if: always()
        run: |
          docker stop pr-agent-ui || true
          docker rm pr-agent-ui || true
