name: Deploy PR-Agent

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (leave empty to use latest tag)'
        required: false
        default: ''

jobs:
  set-version:
    name: Set Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set version
        id: set-version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION="${{ github.event.release.tag_name }}"
          elif [[ -n "${{ github.event.inputs.version }}" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=$(git describe --tags --abbrev=0)
          fi
          echo "Using version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: set-version
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push GitHub App image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: |
            codiumai/pr-agent:github-app-${{ needs.set-version.outputs.version }}
            codiumai/pr-agent:github-app-latest
          cache-from: type=gha,scope=prod
          cache-to: type=gha,mode=max,scope=prod
          target: github_app

      - name: Build and push CLI image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: |
            codiumai/pr-agent:cli-${{ needs.set-version.outputs.version }}
            codiumai/pr-agent:cli-latest
          cache-from: type=gha,scope=prod
          cache-to: type=gha,mode=max,scope=prod
          target: cli

      - name: Build and push Bitbucket App image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: |
            codiumai/pr-agent:bitbucket-app-${{ needs.set-version.outputs.version }}
            codiumai/pr-agent:bitbucket-app-latest
          cache-from: type=gha,scope=prod
          cache-to: type=gha,mode=max,scope=prod
          target: bitbucket_app

      - name: Build and push GitLab Webhook image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: |
            codiumai/pr-agent:gitlab-webhook-${{ needs.set-version.outputs.version }}
            codiumai/pr-agent:gitlab-webhook-latest
          cache-from: type=gha,scope=prod
          cache-to: type=gha,mode=max,scope=prod
          target: gitlab_webhook

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [set-version, build-and-push]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip_existing: true
